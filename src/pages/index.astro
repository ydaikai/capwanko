---
import Layout from '../layouts/Layout.astro'
import { getAllPosts } from '../lib/api'

const posts = await getAllPosts()

// ページネーションの設定
const postsPerPage = 9
const currentPage = Number(Astro.url.searchParams.get('page')) || 1
const totalPages = Math.ceil(posts.length / postsPerPage)

// 現在のページの記事を取得
const start = (currentPage - 1) * postsPerPage
const end = start + postsPerPage
const currentPosts = posts.slice(start, end)
---

<Layout title='Blog'>
	<div class='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6'>
		{
			currentPosts.map((post) => (
				<article class='bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden hover:shadow-lg transition-shadow'>
					<a href={`/post/${post.id}`} class='block' transition:name={`post-card-${post.id}`}>
						{post.eyecatch && (
							<img
								src={post.eyecatch.url}
								alt=''
								class='w-full h-48 object-cover'
								transition:name={`post-image-${post.id}`}
							/>
						)}
						<div class='p-4'>
							<h2
								class='text-lg font-semibold mb-2 line-clamp-2'
								transition:name={`post-title-${post.id}`}
							>
								{post.title}
							</h2>
							<div class='flex items-center justify-between text-sm text-gray-500 dark:text-gray-400'>
								<time datetime={post.publishedAt}>
									{new Date(post.publishedAt).toLocaleDateString('ja-JP')}
								</time>
								{post.category && (
									<span class='inline-block px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded text-xs'>
										{post.category.name}
									</span>
								)}
							</div>
						</div>
					</a>
				</article>
			))
		}
	</div>

	{/* ページネーション */}
	{
		totalPages > 1 && (
			<nav class='mt-12 flex justify-center gap-2'>
				{/* 前のページ */}
				{currentPage > 1 && (
					<a
						href={`?page=${currentPage - 1}`}
						class='inline-flex items-center justify-center w-10 h-10 rounded-full border border-gray-300 dark:border-gray-600 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors'
					>
						<span class='sr-only'>前のページ</span>
						<svg class='w-5 h-5' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
							<path
								stroke-linecap='round'
								stroke-linejoin='round'
								stroke-width='2'
								d='M15 19l-7-7 7-7'
							/>
						</svg>
					</a>
				)}

				{/* ページ番号 */}
				{Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
					<a
						href={`?page=${page}`}
						class:list={[
							'inline-flex items-center justify-center w-10 h-10 rounded-full text-sm transition-colors',
							page === currentPage
								? 'bg-blue-600 text-white'
								: 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700'
						]}
					>
						{page}
					</a>
				))}

				{/* 次のページ */}
				{currentPage < totalPages && (
					<a
						href={`?page=${currentPage + 1}`}
						class='inline-flex items-center justify-center w-10 h-10 rounded-full border border-gray-300 dark:border-gray-600 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors'
					>
						<span class='sr-only'>次のページ</span>
						<svg class='w-5 h-5' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
							<path
								stroke-linecap='round'
								stroke-linejoin='round'
								stroke-width='2'
								d='M9 5l7 7-7 7'
							/>
						</svg>
					</a>
				)}
			</nav>
		)
	}
</Layout>
